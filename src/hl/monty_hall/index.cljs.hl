(page "index.html"
      (:require
        [javelin.core :as j :refer [cell]
         :refer-macros [cell= defc defc= cell-let with-let]]
        [monty-hall.rpc :as rpc]))

;(rpc/init)

(defc prizes [:car :goat1 :goat2])
(defc first-choice nil)
(defc second-choice nil)
(defc disclosed nil)

(defn door-elem [prize]
      (let [car-image "/car.jpg"
            sheep-image "/sheep.png"
            door-image "/closed-door.png"
            border (cell= (if (= prize (or second-choice first-choice))
                            "1px solid pink"
                            nil))
            image (cell= (if (= prize :car)
                           car-image
                           sheep-image))
            filters [#(not= % @first-choice) #(not= % :car)]
            open #(reset! disclosed
                         (->> @prizes
                              (filter (apply every-pred filters))
                              rand-nth))
            choose (fn [prize]
                       (when (and @first-choice (nil? @second-choice) (not= @prize @disclosed))
                             (dosync (reset! second-choice @prize)))
                       (when (nil? @first-choice)
                             (do (reset! first-choice @prize)
                                 (open))))]
           (td
             (if-tpl (cell= (or (= prize disclosed) second-choice))
                     (img :src image :width 200 :style (cell= (str "border:" border)))
                     (img :src door-image :width 200 :style (cell= (str "border:" border "; cursor: pointer"))
                          :click #(choose prize))))))

(defn caption-elem []
      (let [door-num #(+ (.indexOf @prizes %) 1)]
           (div :style "width: 650px"
                (cond-tpl
                  (cell= (nil? first-choice))
                  (h3 "Behind one of these doors is a car.\n
                       Behind each of the other two doors is a goat.\n
                       Click on the door that you think the car is behind.")
                  (cell= (and first-choice (nil? second-choice)))
                  (h3 (cell= (str "Obviously the car is not behind Door "
                                  (door-num disclosed)
                                  ". You have chosen Door "
                                  (door-num first-choice)
                                  ". You may change your choice if you like.
                                  Again, click on the door which you think the car is behind."
                                  )))
                  (cell= (and first-choice second-choice))
                  (h3 (cell= (str (if (= second-choice :car)
                                    "CONGRATULATIONS! You WON!"
                                    "YOU LOST!!")
                                  " RECAP: You originally picked Door "
                                  (door-num first-choice)
                                  (if (= first-choice second-choice)
                                    " and then stayed with that door."
                                    (str " and then switched to Door "
                                         (door-num second-choice)
                                         ".")))))))))

(html
  (head
    (title "The Monty Hall")
    (link :href "app.css" :rel "stylesheet"))
  (body
    (h1 :style "color: pink"
        (text "Monty Knows"))
    (button :click #(dosync (reset! first-choice nil)
                            (reset! second-choice nil)
                            (reset! disclosed nil)
                            (swap! prizes shuffle))
            "Reset")
    (table
      (tr
        (for-tpl [prize prizes]
                 (door-elem prize))))
    (caption-elem)))